package it.polimi.testing.temporalassertions.core;

import org.hamcrest.Matcher;

import it.polimi.testing.temporalassertions.events.Event;

import static it.polimi.testing.temporalassertions.core.AllEventsWhereEach.allEventsWhereEach;
import static it.polimi.testing.temporalassertions.core.AtLeast.atLeast;

/**
 * Prefix used to create a existential checks
 */
public class Exist
{
    private AbstractQuantifier quantifier;
    private AbstractExistConstraint constraint;

    /**
     * Constructor
     * @param quantifier defines the cardinality of the events
     * @param where the constraint specifying where the events need to exist
     */
    private Exist(AbstractExistConstraint where, AbstractQuantifier quantifier)
    {
        this.quantifier = quantifier;
        this.constraint = where;
    }

    /**
     * Allows to define the first part of an existential check
     * @param quantifier the quantifier that defines the number of events that must exist in the sequence
     * @return the first part of the existential quantifier
     */
    public static Exist exist(AbstractQuantifier quantifier)
    {
        return exist(null, quantifier);
    }

    /**
     * Allows to define the first part of an existential check
     * @param where the constraint specifying where the events need to exist
     * @param quantifier the quantifier that defines the number of events that must exist in the sequence
     * @return the first part of the existential quantifier
     */
    public static Exist exist(AbstractExistConstraint where, AbstractQuantifier quantifier)
    {
        return new Exist(where, quantifier);
    }

    /**
     * Checks that at least one event in the sequence matches the Hamcrest matcher
     * @return the check will return SUCCESS if the event exists, FAILURE if it does not
     */
    public static Check existsAnEventThat(Matcher<? extends Event> matcher)
    {
        return AllEventsWhereEach.allEventsWhereEach(matcher).are(atLeast(1))
                .overwriteDescription("Exists an event that "+matcher);
    }

    /**
     * Given the first part of the existential quantifier generated by {@link Exist#exist(AbstractQuantifier)}
     * or {@link Exist#exist(AbstractExistConstraint, AbstractQuantifier)}, this method allows to specify the
     * second part, defining the events that need to be checked.For example {@code exist(exactly(10)).eventsWhereEach(m)}
     * checks that in the entire sequence there are exactly 10 events that match {@code m}.
     * @param matcher the Hamcrest matcher that describes the events
     * @return the check will return SUCCESS if the quantifier is verified, FAILURE otherwise
     */
    public Check eventsWhereEach(final Matcher<? extends Event> matcher)
    {
        // If no "where" constraint, this is equivalent to the "are" check
        if(constraint==null) return allEventsWhereEach(matcher).are(quantifier);

        // Otherwise get the constrained check
        return constraint.getConstrainedExistCheck(matcher, quantifier);
    }
}
